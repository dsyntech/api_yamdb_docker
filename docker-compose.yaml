# версия docker-compose, от версии зависит набор команд,
# которые можно применять в docker-compose.yaml.
# Подробнее: https://docs.docker.com/compose/compose-file/compose-versioning/
version: '3.8'

# имена директорий для хранения данных:
volumes:
  # название директории для хранения данных БД:
  postgres_data:  
  static_value:
  media_value:

# имена и описания контейнеров, которые должны быть развёрнуты:
services:
  # описание контейнера db:
  db:
    # образ, из которого должен быть запущен контейнер:
    image: postgres:12.4
    # volume и связанная с ним директория в контейнере, которую надо перенести
    # во «внешнее хранилище данных» (volume):
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # адрес файла, где хранятся переменные окружения:
    env_file:
      - ./.env

  web:
    # build <address>: создать образ для контейнера из докерфайла,
    # который лежит в директории <address>:
    build: .
    # аналог системы запуска юнитов в systemd:
    restart: always
    # аналог инструкции CMD в докерфайле:
    command: gunicorn api_yamdb.wsgi:application --bind 0.0.0.0:8000
    # указывает, какие порты открыть наружу и какие порты приложения
    # им соответствуют (это называют «проброс портов»):
    ports:
      - "8000:8000"
    volumes:
      # Контейнер web будет работать с данными, хранящиеся в томе static_value, 
      # через свою директорию /code/static/
      - static_value:/code/static/

      # Данные, хранящиеся в томе media_value, будут доступны в контейнере web 
      # через директорию /code/media/
      - media_value:/code/media/
    # определяет, после какого контейнера должен быть запущен
    # описываемый контейнер:
    depends_on:
      - db
    # указывает, где лежат переменные окружения для проброса внутрь контейнера:
    env_file:
      - ./.env

  nginx:
    # образ, из которого должен быть запущен контейнер
    image: nginx:1.19.3

    # запросы с внешнего порта 80 перенаправляем на внутренний порт 80
    ports:
      - "80:80"

    volumes:
      # При сборке скопировать созданный нами конфиг nginx из исходной директории 
      # в контейнер и сохранить его в директорию /etc/nginx/conf.d/
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf

      # Контейнер nginx будет работать с данными, хранящиеся в томе static_value, 
      # через свою директорию /var/html/static/
      - static_value:/var/html/static/

      # Данные, хранящиеся в томе media_value, будут доступны в контейнере nginx
      # через директорию /var/html/media/
      - media_value:/var/html/media/

    depends_on:
      # Контейнер nginx должен быть запущен после контейнера web
      - web
